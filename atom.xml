<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WHC 的个人博客</title>
  
  <subtitle>WHC blog</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-24T19:30:55.883Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>whc</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springmvc的数据请求</title>
    <link href="http://example.com/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/"/>
    <id>http://example.com/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/</id>
    <published>2022-09-14T18:54:39.000Z</published>
    <updated>2022-04-24T19:30:55.883Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425031516981.png" alt="image-20220425031516981"></p><h1 id="springmvc的数据请求（往后传）"><a href="#springmvc的数据请求（往后传）" class="headerlink" title="springmvc的数据请求（往后传）"></a>springmvc的数据请求（往后传）</h1><h2 id="获得请求参数"><a href="#获得请求参数" class="headerlink" title="获得请求参数"></a>获得请求参数</h2><h3 id="请求参数的类型"><a href="#请求参数的类型" class="headerlink" title="请求参数的类型"></a>请求参数的类型</h3><h4 id="获得基本类型参数"><a href="#获得基本类型参数" class="headerlink" title="获得基本类型参数"></a>获得基本类型参数</h4><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425031917682.png" alt="image-20220425031917682"></p><h4 id="获得pojo类型参数"><a href="#获得pojo类型参数" class="headerlink" title="获得pojo类型参数"></a>获得pojo类型参数</h4><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032002413.png" alt="image-20220425032002413"></p><h4 id="获得数组类型参数"><a href="#获得数组类型参数" class="headerlink" title="获得数组类型参数"></a>获得数组类型参数</h4><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032108549.png" alt="image-20220425032108549"></p><h4 id="获得集合类型参数"><a href="#获得集合类型参数" class="headerlink" title="获得集合类型参数"></a>获得集合类型参数</h4><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032213000.png" alt="image-20220425032213000"></p><h3 id="参数绑定注解-RequestParam"><a href="#参数绑定注解-RequestParam" class="headerlink" title="参数绑定注解@RequestParam"></a>参数绑定注解@RequestParam</h3><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032311511.png" alt="image-20220425032311511"></p><h3 id="restful风格"><a href="#restful风格" class="headerlink" title="restful风格"></a>restful风格</h3><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032329209.png" alt="image-20220425032329209"></p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032336310.png" alt="image-20220425032336310"></p><h3 id="获得servlet相关api"><a href="#获得servlet相关api" class="headerlink" title="获得servlet相关api"></a>获得servlet相关api</h3><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032346648.png" alt="image-20220425032346648"></p><h3 id="获得请求头信息"><a href="#获得请求头信息" class="headerlink" title="获得请求头信息"></a>获得请求头信息</h3><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032401411.png" alt="image-20220425032401411"></p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032410310.png" alt="image-20220425032410310"></p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032417431.png" alt="image-20220425032417431"></p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032424474.png" alt="image-20220425032424474"></p><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><h4 id="静态资源的开启"><a href="#静态资源的开启" class="headerlink" title="静态资源的开启"></a>静态资源的开启</h4><p>因为是前端控制器找资源（找方法的路径），无法找到静态资源</p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032510998.png" alt="image-20220425032510998"></p><p>方法二：<br>当前端控制器找不到，让原始容器tomcat去找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc: default-servlet-handler/&gt;</span><br></pre></td></tr></table></figure><h4 id="配置全局乱码过滤器"><a href="#配置全局乱码过滤器" class="headerlink" title="配置全局乱码过滤器"></a>配置全局乱码过滤器</h4><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032624911.png" alt="image-20220425032624911"></p><h4 id="自定义类型转换器"><a href="#自定义类型转换器" class="headerlink" title="自定义类型转换器"></a>自定义类型转换器</h4><p>SpringMVC默认已经提供了一些常用的类型转换器，例如客户端提交的字符串转换成int型进行参数设置。但是不是所有的数据类型都提供了转换器，没有提供的就需要自定义转换器，例如:日期类型的数据就需要自定义转换器。</p><p>自定义类型转换器的开发步骤:<br>1.定义转换器类实现Converter接口）<br>2.在配置文件中声明转换器<br>3.在<annotation-driven>中引用转换器</annotation-driven></p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032756509.png" alt="image-20220425032756509"></p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032807758.png" alt="image-20220425032807758"></p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032824070.png" alt="image-20220425032824070"></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="文件上传原理"><a href="#文件上传原理" class="headerlink" title="文件上传原理"></a>文件上传原理</h3><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032834163.png" alt="image-20220425032834163"></p><h3 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h3><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032856331.png" alt="image-20220425032856331"></p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032913690.png" alt="image-20220425032913690"></p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425032925538.png" alt="image-20220425032925538"></p><h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><p>多文件上传，只需要将页面修改为多个文件上传项，将方法参数MultipartFile类型修改为MultipartFile[]即可</p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425033003816.png" alt="image-20220425033003816"></p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425033010210.png" alt="image-20220425033010210"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82/image-20220425031516981.png&quot; alt=&quot;image-20220425031516981&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>springmvc的数据响应</title>
    <link href="http://example.com/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/"/>
    <id>http://example.com/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/</id>
    <published>2022-09-14T18:53:57.000Z</published>
    <updated>2022-04-24T19:14:54.762Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/image-20220425030120894.png" alt="image-20220425030120894"></p><h1 id="springmvc的数据响应（往前传）"><a href="#springmvc的数据响应（往前传）" class="headerlink" title="springmvc的数据响应（往前传）"></a>springmvc的数据响应（往前传）</h1><h2 id="页面跳转"><a href="#页面跳转" class="headerlink" title="页面跳转"></a>页面跳转</h2><h3 id="转发和重定向的区别"><a href="#转发和重定向的区别" class="headerlink" title="转发和重定向的区别"></a>转发和重定向的区别</h3><p>转发：</p><p>地址栏不发生变化，显示的是上一个页面的地址<br>请求次数：只有1次请求<br>根目录：<a href="http://localhost:8080/%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80/%EF%BC%8C%E5%8C%85%E5%90%AB%E4%BA%86%E9%A1%B9%E7%9B%AE%E7%9A%84%E8%AE%BF%E9%97%AE%E5%9C%B0%E5%9D%80">http://localhost:8080/项目地址/，包含了项目的访问地址</a><br>请求域中数据不会丢失</p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/image-20220425030346442.png" alt="image-20220425030346442"></p><p>重定向：</p><p>地址栏：显示新的地址<br>请求次数：2次<br>根目录：<a href="http://localhost:8080/">http://localhost:8080/</a> 没有项目的名字<br>请求域中的数据会丢失，因为是2次请求</p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/image-20220425030416929.png" alt="image-20220425030416929"></p><h3 id="直接返回字符串形式"><a href="#直接返回字符串形式" class="headerlink" title="直接返回字符串形式"></a>直接返回字符串形式</h3><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/image-20220425030511128.png" alt="image-20220425030511128"></p><h3 id="返回modeAndview形式"><a href="#返回modeAndview形式" class="headerlink" title="返回modeAndview形式"></a>返回modeAndview形式</h3><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/image-20220425030543294.png" alt="image-20220425030543294"></p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/image-20220425030554039.png" alt="image-20220425030554039"></p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/image-20220425030612690.png" alt="image-20220425030612690"></p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/image-20220425030620199.png" alt="image-20220425030620199"></p><h2 id="回写数据"><a href="#回写数据" class="headerlink" title="回写数据"></a>回写数据</h2><h3 id="直接回写字符串"><a href="#直接回写字符串" class="headerlink" title="直接回写字符串"></a>直接回写字符串</h3><p>Web基础阶段，客户端访问服务器端，如果想直接回写字符串作为响应体返回的话，只需要使用<br>response.getWriter().print(“hello world”)即可<br>通过SpringMVC框架注入的response对象，使用response.getWriter().print(“hello world”)回写数<br>据，此时不需要视图跳转，业务方法返回值为void。</p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/image-20220425030704866.png" alt="image-20220425030704866"></p><p>将需要回写的字符串直接返回，但此时需要通过eResponseBody注解告知SpringMVC框架，方法<br>返回的字符串不是跳转是直接在http响应体中返回。</p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/image-20220425030728991.png" alt="image-20220425030728991"></p><h3 id="返回json字符串"><a href="#返回json字符串" class="headerlink" title="返回json字符串"></a>返回json字符串</h3><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/image-20220425030918490.png" alt="image-20220425030918490"></p><p>配置自动转换json格式的处理适配器</p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/image-20220425031346641.png" alt="image-20220425031346641"></p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/image-20220425031353346.png" alt="image-20220425031353346"></p><p><img src="/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/image-20220425031403035.png" alt="image-20220425031403035"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/09/15/springmvc%E7%9A%84%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/image-20220425030120894.png&quot; alt=&quot;image-20220425030120894&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>springmvc简介</title>
    <link href="http://example.com/2022/09/10/springmvc%E7%AE%80%E4%BB%8B/"/>
    <id>http://example.com/2022/09/10/springmvc%E7%AE%80%E4%BB%8B/</id>
    <published>2022-09-09T18:51:41.000Z</published>
    <updated>2022-04-24T19:00:38.584Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2022/09/10/springmvc%E7%AE%80%E4%BB%8B/image-20220425025507677.png" alt="image-20220425025507677"></p><h1 id="springmvc是什么"><a href="#springmvc是什么" class="headerlink" title="springmvc是什么"></a>springmvc是什么</h1><ul><li>SpringMVC是一种基于Java的实现MVC设计模型的请求驱动类型的轻量级Web框架，</li><li>它通过一套注解，让一个简单的Java类成为处理请求的控制器，而无须实现任何接口。</li><li>同时它还支持RESTful编程风格的请求。</li></ul><h1 id="springmvc原理及开发步骤"><a href="#springmvc原理及开发步骤" class="headerlink" title="springmvc原理及开发步骤"></a>springmvc原理及开发步骤</h1><p><img src="/2022/09/10/springmvc%E7%AE%80%E4%BB%8B/image-20220425025556593.png" alt="image-20220425025556593"></p><p><img src="/2022/09/10/springmvc%E7%AE%80%E4%BB%8B/image-20220425025610016.png" alt="image-20220425025610016"></p><p><img src="/2022/09/10/springmvc%E7%AE%80%E4%BB%8B/image-20220425025618478.png" alt="image-20220425025618478"></p><p><img src="/2022/09/10/springmvc%E7%AE%80%E4%BB%8B/image-20220425025631452.png" alt="image-20220425025631452"></p><h1 id="springweb环境的配置"><a href="#springweb环境的配置" class="headerlink" title="springweb环境的配置"></a>springweb环境的配置</h1><p><img src="/2022/09/10/springmvc%E7%AE%80%E4%BB%8B/image-20220425025844120.png" alt="image-20220425025844120"></p><p><img src="/2022/09/10/springmvc%E7%AE%80%E4%BB%8B/image-20220425025858300.png" alt="image-20220425025858300"></p><p><img src="/2022/09/10/springmvc%E7%AE%80%E4%BB%8B/image-20220425025905633.png" alt="image-20220425025905633"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2022/09/10/springmvc%E7%AE%80%E4%BB%8B/image-20220425025507677.png&quot; alt=&quot;image-20220425025507677&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;springmvc是什么&quot;&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Git常用命令</title>
    <link href="http://example.com/2021/09/27/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2021/09/27/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2021-09-27T14:59:40.000Z</published>
    <updated>2022-04-24T17:25:05.451Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="/2021/09/27/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/30465AB5B811FE11FCE1FF246E6CFBF7.png" alt="30465AB5B811FE11FCE1FF246E6CFBF7"></p><h2 id="Git工作流程图"><a href="#Git工作流程图" class="headerlink" title="Git工作流程图"></a>Git工作流程图</h2><p><img src="/2021/09/27/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/IMG_0783.PNG" alt="IMG_0783"></p><h2 id="基础操作指令"><a href="#基础操作指令" class="headerlink" title="基础操作指令"></a>基础操作指令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="创建文件并提交"><a href="#创建文件并提交" class="headerlink" title="创建文件并提交"></a>创建文件并提交</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#x27;commit 01&#x27;</span><br><span class="line"></span><br><span class="line">#查看日志</span><br><span class="line">git log</span><br></pre></td></tr></table></figure><h3 id="修改文件并提交"><a href="#修改文件并提交" class="headerlink" title="修改文件并提交"></a>修改文件并提交</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#修改文件内容</span><br><span class="line">git add .</span><br><span class="line">git commit ---m &#x27;update file01&#x27;</span><br></pre></td></tr></table></figure><h3 id="将最后一次修改还原"><a href="#将最后一次修改还原" class="headerlink" title="将最后一次修改还原"></a>将最后一次修改还原</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset commitId --hard</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="创建并切换到dev1分支-在dev01分支提交"><a href="#创建并切换到dev1分支-在dev01分支提交" class="headerlink" title="创建并切换到dev1分支,在dev01分支提交"></a>创建并切换到dev1分支,在dev01分支提交</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#创建分支</span><br><span class="line">git branch dev01</span><br><span class="line">#切换分支</span><br><span class="line">git checkout dev01</span><br><span class="line">#提交分支</span><br><span class="line">git add .</span><br><span class="line">git commit -m &#x27;add file on dev&#x27;</span><br></pre></td></tr></table></figure><h3 id="切換到-master分支-将dev1合并到-master分支"><a href="#切換到-master分支-将dev1合并到-master分支" class="headerlink" title="切換到 master分支,将dev1合并到 master分支"></a>切換到 master分支,将dev1合并到 master分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge dev01</span><br></pre></td></tr></table></figure><h3 id="删除dev分支"><a href="#删除dev分支" class="headerlink" title="删除dev分支"></a>删除dev分支</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d dev01</span><br></pre></td></tr></table></figure><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="将本地仓库推送到远程仓库"><a href="#将本地仓库推送到远程仓库" class="headerlink" title="将本地仓库推送到远程仓库"></a>将本地仓库推送到远程仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@gitee.com/**/**.git</span><br><span class="line">git push --set-upstream origin master</span><br></pre></td></tr></table></figure><h3 id="将远程仓库克隆到本地"><a href="#将远程仓库克隆到本地" class="headerlink" title="将远程仓库克隆到本地"></a>将远程仓库克隆到本地</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#克隆到git_test文件夹</span><br><span class="line">git clone git@gitee.com/**/**.git git_test</span><br></pre></td></tr></table></figure><h3 id="将本地修改推送到远程仓库"><a href="#将本地修改推送到远程仓库" class="headerlink" title="将本地修改推送到远程仓库"></a>将本地修改推送到远程仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &#x27;add file03&#x27;</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h3 id="将远程仓库的修改更新到本地"><a href="#将远程仓库的修改更新到本地" class="headerlink" title="将远程仓库的修改更新到本地"></a>将远程仓库的修改更新到本地</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;&lt;img src=&quot;/2021/09/27/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/30465AB5B811FE11FCE1FF246E6CF</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>spring的Ioc</title>
    <link href="http://example.com/2021/09/10/spring%E7%9A%84Ioc/"/>
    <id>http://example.com/2021/09/10/spring%E7%9A%84Ioc/</id>
    <published>2021-09-10T02:13:45.000Z</published>
    <updated>2022-04-24T18:45:52.400Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/09/10/spring%E7%9A%84Ioc/image-20220425022718381.png" alt="image-20220425022718381"></p><h1 id="Spring的IOC（控制反转）"><a href="#Spring的IOC（控制反转）" class="headerlink" title="Spring的IOC（控制反转）"></a>Spring的IOC（控制反转）</h1><h2 id="spring简介"><a href="#spring简介" class="headerlink" title="spring简介"></a>spring简介</h2><h3 id="Spring是什么"><a href="#Spring是什么" class="headerlink" title="Spring是什么"></a>Spring是什么</h3><ol><li>Spring是轻量级开源框架，它是很多模块的集合 ，以loC(反转控制)和AOP(面向切面编程)为内核。</li><li>旨在提高开发人员的开发效率以及系统的可维护性</li><li>这些模块是核心容器、数据访问&#x2F;集成、Web、AOP（面向切面编程）、工具、消息和测试模块。</li><li>比如Core Container中的Core组件是Spring所有组件的核心，Beans组件和Context组件是实现IOC和DI的基础，AOP组件用来实现面向切面编程。</li></ol><h3 id="Spring的优势"><a href="#Spring的优势" class="headerlink" title="Spring的优势"></a>Spring的优势</h3><p>1)方便解耦，简化开发<br>2)AOP编程的支持<br>3)声明式事务的支持<br>4)方便程序的测试<br>5)方便集成各种优秀框架<br>6)降低JavaEE AP1的使用难度<br>7)Java源码是经典学习范例</p><h3 id="spring的开发步骤"><a href="#spring的开发步骤" class="headerlink" title="spring的开发步骤"></a>spring的开发步骤</h3><ul><li>导入 Spring开发的基本包坐标</li><li>编写Dao接口和实现类</li><li>创建Spring 核心配置文件      </li><li>在Spring 配置文件中配置UserDaolmpl</li><li>使用Spring 的API获得 Bean 实例</li></ul><p><img src="/2021/09/10/spring%E7%9A%84Ioc/image-20220425022024093.png" alt="image-20220425022024093"></p><h2 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h2><h3 id="Bean标签范围配置"><a href="#Bean标签范围配置" class="headerlink" title="Bean标签范围配置"></a>Bean标签范围配置</h3><p>用于配置对象交由Spring来创建。<br>默认情况下它调用的是类中的无参构造函数，如果没有无参构造函数则不能创建成功。<br>基本属性:</p><ul><li>id : Bean实例在Spring容器中的唯─标识</li><li>class: Bean的全限定名称</li><li><img src="/2021/09/10/spring%E7%9A%84Ioc/image-20220425022225407.png" alt="image-20220425022225407"></li></ul><p>当scope的取值为singleton时<br>Bean的实例化个数：1个<br>Bean的实例化时机：当Spring核心文件被加载时，实例化配置的Bean实例<br>Bean的生命周期：<br> 对象创建：当应用加载，创建容器时，对象就被创建了<br> 对象运行：只要容器在，对象一直活着<br> 对象销毁：当应用卸载，销毁容器时，对象就被销毁了<br>2）当scope的取值为prototype时<br>Bean的实例化个数：多个<br>Bean的实例化时机：当调用getBean()方法时实例化Bean<br> 对象创建：当使用对象时，创建新的对象实例<br> 对象运行：只要对象在使用中，就一直活着<br> 对象销毁：当对象长时间不用时，被 Java 的垃圾回收器回收了</p><h3 id="Bean实例化三种方式"><a href="#Bean实例化三种方式" class="headerlink" title="Bean实例化三种方式"></a>Bean实例化三种方式</h3><p><img src="/2021/09/10/spring%E7%9A%84Ioc/image-20220425022353002.png" alt="image-20220425022353002"></p><p><img src="/2021/09/10/spring%E7%9A%84Ioc/image-20220425022402296.png" alt="image-20220425022402296"></p><p><img src="/2021/09/10/spring%E7%9A%84Ioc/image-20220425022411827.png" alt="image-20220425022411827"></p><h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>IOC（Inversion Of Controll，控制反转）是一种设计思想，就是将原本在程序中手动创建对象的控制权，交给IOC容器来管理，并由IOC容器完成对象的注入。这样可以很大程度上简化应用的开发，把应用从复杂的依赖关系中解放出来。IOC容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件&#x2F;注解即可，完全不用考虑对象是如何被创建出来的。</p><h2 id="DI-依赖注入"><a href="#DI-依赖注入" class="headerlink" title="DI 依赖注入"></a>DI 依赖注入</h2><p>依赖注入(Dependency Injection) :它是Spring框架核心IOC的具体实现。<br>在编写程序时，通过控制反转，把对象的创建交给了Spring，但是代码中不可能出现没有依赖的情况。IOC解耦只是降低他们的依赖关系，但不会消除。例如:业务层仍会调用持久层的方法。<br>那这种业务层和持久层的依赖关系，在使用Spring之后，就让Spring来维护了。<br>简单的说，就是坐等框架把持久层对象传入业务层，而不用我们自己去获取。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.it.dao.impl.UserDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userservice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.it.service.imp1.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span> / &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/09/10/spring%E7%9A%84Ioc/image-20220425022718381.png&quot; alt=&quot;image-20220425022718381&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Spring的IOC（控制反转）&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>spring的注解</title>
    <link href="http://example.com/2021/09/05/spring%E7%9A%84%E6%B3%A8%E8%A7%A3/"/>
    <id>http://example.com/2021/09/05/spring%E7%9A%84%E6%B3%A8%E8%A7%A3/</id>
    <published>2021-09-04T18:00:42.000Z</published>
    <updated>2022-04-24T18:44:52.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring原始注解"><a href="#Spring原始注解" class="headerlink" title="Spring原始注解"></a>Spring原始注解</h2><p>Spring原始注解主要是替代<Bean>的配置</Bean></p><p><img src="/2021/09/05/spring%E7%9A%84%E6%B3%A8%E8%A7%A3/image-20220425020400770.png" alt="image-20220425020400770"></p><p>使用注解进行开发时，需要在applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean需要进行扫描以便识别使用注解配置的类、字段和方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>&gt;</span>&lt;/context: component-scan&gt;</span><br></pre></td></tr></table></figure><h2 id="Spring新注解"><a href="#Spring新注解" class="headerlink" title="Spring新注解"></a>Spring新注解</h2><p>使用上面的注解还不能全部替代xml配置文件，还需要使用注解替代的配置如下:</p><ul><li>非自定义的Bean的配置: &lt; bean&gt;</li><li>加载properties文件的配置: &lt; context:property-placeholder &gt;</li><li>组件扫描的配置: &lt; context:component-scan &gt;</li><li>引入其他文件: &lt; import &gt;</li></ul><p><img src="/2021/09/05/spring%E7%9A%84%E6%B3%A8%E8%A7%A3/image-20220425020812734.png" alt="image-20220425020812734"></p><h2 id="引入其他配置文件（分模块开发）"><a href="#引入其他配置文件（分模块开发）" class="headerlink" title="引入其他配置文件（分模块开发）"></a>引入其他配置文件（分模块开发）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt; import resource=&quot;applicationcontext-xxx. xml&quot;/&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Spring原始注解&quot;&gt;&lt;a href=&quot;#Spring原始注解&quot; class=&quot;headerlink&quot; title=&quot;Spring原始注解&quot;&gt;&lt;/a&gt;Spring原始注解&lt;/h2&gt;&lt;p&gt;Spring原始注解主要是替代&lt;Bean&gt;的配置&lt;/Bean&gt;&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
  </entry>
  
</feed>
